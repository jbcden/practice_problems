require 'set'
# @param {Integer[]} nums
# @return {Integer[][]}
def three_sum(nums)
  return [] if nums.empty? || nums.size < 3
  nums.sort!

  high = nums.size - 1
  low = 0
  res = Set.new

  while low < nums.size - 1 do
    low_val = nums[low]
    high_val = nums[high]
    sum = nums[low] + nums[high]

    triple_val = nums[low+1..high-1].bsearch { |x| -sum <=> x }
    # puts "LOW: #{low_val}, HIGH: #{high_val} SUM: #{sum}, TRIPLE VAL: #{triple_val}" if triple_val
    # p nums[low+1..high-1] if triple_val
    # p nums[low+1..high-1].bsearch { |x| x >= -sum } if triple_val
    if triple_val
      res << [low_val, triple_val, high_val]
    end

    high -= 1

    if high == low
      # p 'TESTING', high, low, sums_map
      low += 1
      high = nums.size - 1
    end
  end
  res.to_a
end

# raise 'Empty example' unless three_sum([]) == []
#
# raise 'Zero example' unless three_sum([0]) == []

# p 'First real example' unless three_sum([-1, 0, 1, 2, -1, -4]) == [[-1, -1, 2], [-1, 0, 1]]
p three_sum([-1, 0, 1, 2, -1, -4])

# p 'Second real example' unless three_sum([3,0,-2,-1,1,2]) == [[-2,-1,3],[-2,0,2],[-1,0,1]]
p three_sum([3,0,-2,-1,1,2])

# long=[12,13,12,13,-3,3,11,7,10,5,1,6,6,14,2,-8,-1,-4,3,-10,3,-13,7,-15,12,10,-2,-14,3,-3,-7,0,-12,12,-1,0,0,-13,-8,-12,7,0,9,-1,-8,-12,6,6,-1,-13,3,-13,-11,-4,9,-14,-9,14,9,2,-3,-13,9,0,-15,-15,7,-8,-12,6,-5,10,14,-11,-6,-9,14,8,4,-10,10,-8,14,6,3,8,0,2,8,-6,11,12,-3,5,-3,-11,6,11,-4,1,-6,-1,-4,-7,3,-2,-9,-5,-9,10,0,8,-12,-8,-1]

# FIXME: time to beat is 0.696s
# three_sum(long)

# other_long = [-12,4,12,-4,3,2,-3,14,-14,3,-12,-7,2,14,-11,3,-6,6,4,-2,-7,8,8,10,1,3,10,-9,8,5,11,3,-6,0,6,12,-13,-11,12,10,-1,-15,-12,-14,6,-15,-3,-14,6,8,-9,6,1,7,1,10,-5,-4,-14,-12,-14,4,-2,-5,-11,-10,-7,14,-6,12,1,8,4,5,1,-13,-3,5,10,10,-1,-13,1,-15,9,-13,2,11,-2,3,6,-9,14,-11,1,11,-6,1,10,3,-10,-4,-12,9,8,-3,12,12,-13,7,7,1,1,-7,-6,-13,-13,11,13,-8]
# three_sum(other_long)

huge = [82597,-9243,62390,83030,-97960,-26521,-61011,83390,-38677,12333,75987,46091,83794,19355,-71037,-6242,-28801,324,1202,-90885,-2989,-95597,-34333,35528,5680,89093,-90606,50360,-29393,-27012,53313,65213,99818,-82405,-41661,-3333,-51952,72135,-1523,26377,74685,96992,92263,15929,5467,-99555,-43348,-41689,-60383,-3990,32165,65265,-72973,-58372,12741,-48568,-46596,72419,-1859,34153,62937,81310,-61823,-96770,-54944,8845,-91184,24208,-29078,31495,65258,14198,85395,70506,-40908,56740,-12228,-40072,32429,93001,68445,-73927,25731,-91859,-24150,10093,-60271,-81683,-18126,51055,48189,-6468,25057,81194,-58628,74042,66158,-14452,-49851,-43667,11092,39189,-17025,-79173,13606,83172,92647,-59741,19343,-26644,-57607,82908,-20655,1637,80060,98994,39331,-31274,-61523,91225,-72953,13211,-75116,-98421,-41571,-69074,99587,39345,42151,-2460,98236,15690,-52507,-95803,-48935,-46492,-45606,-79254,-99851,52533,73486,39948,-7240,71815,-585,-96252,90990,-93815,93340,-71848,58733,-14859,-83082,-75794,-82082,-24871,-1]
three_sum(huge)
